// js/simulacoesBDI.js
// ... (Conteúdo completo do simulacoesBDI.js que forneci na mensagem "Parte 3 de 3 (Final)" dos JS,
//      que começa com "// js/simulacoesBDI.js")
// Este arquivo já estava correto e completo com a lógica dos 4 blocos e persistência.
// Repetindo para garantir que você tenha a versão certa nesta sequência final.
import { formatPercentage, formatCurrency, parseFloatStrict } from './utils.js';
import { ui } from './ui.js';
import { getSimulationBdiValues, setSimulationBdiValues, simDefaultValues } from './data.js';

export const simulacoesBDI = {
    init() { this.loadValuesFromData(); this.setupEventListeners(); this.recalculateAllBlocks(); },
    loadValuesFromData() { const currentSimValues = getSimulationBdiValues(); for (const key in currentSimValues) { const inputElement = document.getElementById(key); if (inputElement) { inputElement.value = formatPercentage(currentSimValues[key], (key === 'simPercFatMO' ? 2 : 1) ); if (ui && ui.clearInputError) ui.clearInputError(inputElement); } } this.updateDependentFields(currentSimValues.simPercFatMO); },
    restoreSimulationValues(loadedValues) { setSimulationBdiValues(loadedValues); this.loadValuesFromData(); this.recalculateAllBlocks(); },
    getCurrentSimulationValues() { return getSimulationBdiValues(); },
    updateDependentFields(percFatMO) { const percFatMatInput = document.getElementById('simPercFatMat'); if (percFatMatInput) { const percMat = 100 - parseFloatStrict(percFatMO); percFatMatInput.value = formatPercentage(percMat); } },
    setupEventListeners() { const simValueKeys = Object.keys(simDefaultValues); simValueKeys.forEach(id => { const inputElement = document.getElementById(id); if (inputElement && !inputElement.readOnly) { inputElement.addEventListener('blur', (event) => { if (ui && ui.clearInputError) ui.clearInputError(inputElement); let value = parseFloatStrict(event.target.value.replace('%','').replace(',','.')); let min = 0, max = 100; if (id.includes('Lucro')) max = 1000; else if (id === 'simTributosMat') max = 100; if (isNaN(value)) { if(ui && ui.showInputError) ui.showInputError(inputElement, 'Valor inválido.'); value = getSimulationBdiValues()[id]; } else if (value < min) { if(ui && ui.showInputError) ui.showInputError(inputElement, `Mínimo ${min}%.`); value = min; } else if (value > max) { if(ui && ui.showInputError) ui.showInputError(inputElement, `Máximo ${max}%.`); value = max; } event.target.value = formatPercentage(value, (id === 'simPercFatMO' ? 2 : 1) ); const currentSimData = getSimulationBdiValues(); currentSimData[id] = value; setSimulationBdiValues(currentSimData); if (id === 'simPercFatMO') { this.updateDependentFields(value); } this.recalculateAllBlocks(); }); inputElement.addEventListener('focus', () => { if (ui && ui.clearInputError) ui.clearInputError(inputElement); }); } }); },
    recalculateAllBlocks() { const custoTotalMO = ui.calculadora.getTotalCustoMO(); const custoTotalMat = ui.calculadora.getTotalCustoMaterial(); const currentSimData = getSimulationBdiValues(); const simCustoDiretoMOEl = document.getElementById('simCustoDiretoMO'); if(simCustoDiretoMOEl) simCustoDiretoMOEl.value = formatCurrency(custoTotalMO); const simCustoDiretoMatEl = document.getElementById('simCustoDiretoMat'); if(simCustoDiretoMatEl) simCustoDiretoMatEl.value = formatCurrency(custoTotalMat); const bdiMultiplicadorMO = this.calculateBdiMultiplier(currentSimData.simAdminMO, currentSimData.simRiscoMO, currentSimData.simCustoFinMO, currentSimData.simTributosMO, currentSimData.simLucroMO); document.getElementById('simBdiFatorMO').textContent = formatPercentage(bdiMultiplicadorMO * 100); const totalComBdiMO = custoTotalMO * bdiMultiplicadorMO; const impostoValorMO = totalComBdiMO * (currentSimData.simTributosMO / 100); const totalMenosImpostoMO = totalComBdiMO - impostoValorMO; const lucroBaseMO = custoTotalMO * (1 + (currentSimData.simAdminMO/100) + (currentSimData.simRiscoMO/100) + (currentSimData.simCustoFinMO/100)); const denLucroMO = (1 - (currentSimData.simTributosMO/100) - (currentSimData.simLucroMO/100)); const lucroValorMO = denLucroMO === 0 ? 0 : lucroBaseMO / denLucroMO * (currentSimData.simLucroMO/100); this.updateResumoTable('simResumoBloco1Body', { custoMO: custoTotalMO, totalComBdiMO, totalMenosImpostoMO, lucroMO: lucroValorMO, percLucroMO: custoTotalMO > 0 ? (lucroValorMO / custoTotalMO) * 100 : 0 }); const bdiMultiplicadorMat = this.calculateBdiMultiplier(currentSimData.simAdminMat, currentSimData.simRiscoMat, currentSimData.simCustoFinMat, currentSimData.simTributosMat, currentSimData.simLucroMat); document.getElementById('simBdiFatorMat').textContent = formatPercentage(bdiMultiplicadorMat * 100); const totalComBdiMat = custoTotalMat * bdiMultiplicadorMat; const impostoValorMat = totalComBdiMat * (currentSimData.simTributosMat / 100); const totalMenosImpostoMat = totalComBdiMat - impostoValorMat; const lucroBaseMat = custoTotalMat * (1 + (currentSimData.simAdminMat/100) + (currentSimData.simRiscoMat/100) + (currentSimData.simCustoFinMat/100)); const denLucroMat = (1 - (currentSimData.simTributosMat/100) - (currentSimData.simLucroMat/100)); const lucroValorMat = denLucroMat === 0 ? 0 : lucroBaseMat / denLucroMat * (currentSimData.simLucroMat/100); this.updateResumoTable('simResumoBloco2Body', { custoMat: custoTotalMat, totalComBdiMat, totalMenosImpostoMat, lucroMat: lucroValorMat, percLucroMat: custoTotalMat > 0 ? (lucroValorMat / custoTotalMat) * 100 : 0 }); const valorTotalSimulado = totalComBdiMO + totalComBdiMat; const valorTotalMenosImpostosSimulado = totalMenosImpostoMO + totalMenosImpostoMat; const custoDiretoTotalSimulado = custoTotalMO + custoTotalMat; const lucroTotalSimulado = lucroValorMO + lucroValorMat; this.updateResumoTable('simResumoBloco3Body', { valorTotalSimulado, valorTotalMenosImpostosSimulado, custoDiretoTotalSimulado, lucroTotalSimulado, percLucroTotalSimulado: custoDiretoTotalSimulado > 0 ? (lucroTotalSimulado / custoDiretoTotalSimulado) * 100 : 0 }); const percFatMOVal = currentSimData.simPercFatMO; const percFatMatVal = 100 - percFatMOVal; const faturamentoBase = valorTotalSimulado; const valorTotalFaturadoMO = faturamentoBase * (percFatMOVal / 100); const valorTotalFaturadoMat = faturamentoBase * (percFatMatVal / 100); const impostoValorFatMO = valorTotalFaturadoMO * (currentSimData.simTributosMO / 100); const impostoValorFatMat = valorTotalFaturadoMat * (currentSimData.simTributosMat / 100); const valorMenosImpostoFatMO = valorTotalFaturadoMO - impostoValorFatMO; const valorMenosImpostoFatMat = valorTotalFaturadoMat - impostoValorFatMat; this.updateResumoTable('simResumoBloco4AjusteBody', { faturamentoPercMO: percFatMOVal, faturamentoPercMat: percFatMatVal, valorTotalFaturadoMO, valorTotalFaturadoMat, impostoValorMO: impostoValorFatMO, impostoValorMat: impostoValorFatMat, valorMenosImpostoMO: valorMenosImpostoFatMO, valorMenosImpostoMat: valorMenosImpostoFatMat, }, true); const valorTotalFaturadoGeral = valorTotalFaturadoMO + valorTotalFaturadoMat; const valorTotalFaturadoMenosImpostoGeral = valorMenosImpostoFatMO + valorMenosImpostoFatMat; const custoDiretoTotalAjuste = custoTotalMO + custoTotalMat; const lucroAjustado = valorTotalFaturadoMenosImpostoGeral - custoDiretoTotalAjuste; this.updateResumoTable('simResumoBloco4FinalBody', { valorTotalFaturadoGeral, valorTotalFaturadoMenosImpostoGeral, custoDiretoTotalAjuste, lucroAjustado, percLucroAjustado: custoDiretoTotalAjuste > 0 ? (lucroAjustado / custoDiretoTotalAjuste) * 100 : 0 }); },
    calculateBdiMultiplier(admin, risco, custoFin, tributos, lucro) { const AC = admin / 100; const R = risco / 100; const CF = custoFin / 100; const T = tributos / 100; const L = lucro / 100; const denominador = 1 - T - L; if (denominador <= 0) return 1; return (1 + AC + R + CF) / denominador; },
    updateResumoTable(tbodyId, data, isAdjustmentTable = false) { const tbody = document.getElementById(tbodyId); if (!tbody) return; tbody.querySelectorAll('tr').forEach(row => { const dataValueKey = row.cells[1].dataset.value; if (isAdjustmentTable) { const keyMO = row.cells[1].dataset.value; const keyMat = row.cells[2].dataset.value; if (data[keyMO] !== undefined) row.cells[1].textContent = keyMO.toLowerCase().includes('perc') ? formatPercentage(data[keyMO]) : formatCurrency(data[keyMO]); if (data[keyMat] !== undefined) row.cells[2].textContent = keyMat.toLowerCase().includes('perc') ? formatPercentage(data[keyMat]) : formatCurrency(data[keyMat]); } else { if (data[dataValueKey] !== undefined) { const value = data[dataValueKey]; row.cells[1].textContent = dataValueKey.toLowerCase().includes('perc') || dataValueKey.toLowerCase().includes('fator') ? formatPercentage(value) : formatCurrency(value); } } }); }
};