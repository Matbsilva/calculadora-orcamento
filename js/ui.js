// js/ui.js
// ... (Conteúdo completo do ui.js que forneci na Parte 3 de 3 dos JS - a versão que começa com "// js/ui.js" e tem todas as importações, incluindo gráficos)
// Este arquivo já estava correto e completo.
import { configManager } from './config.js';
import { calculadora as calc } from './calculadora.js';
import { simulacoesBDI as simBDI } from './simulacoesBDI.js';
import { parseCurrency, formatCurrency, parsePercentage, formatPercentage, debounce, parseFloatStrict } from './utils.js';
import { budgetDataStructure as baseListaServicos, getAreaObra, getBdiFinalAdotado, getLaborCosts, getMaterialPrices, getSimulationBdiValues, setSimulationBdiValues } from './data.js';
import { persistencia } from './persistencia.js';
import { handlers } from './handlers.js';
import { resumoFinanceiro, listas as moduloListas, curvaABC, cronogramaEstimado } from './relatorios.js';
import { initGraficoCurvaABC, renderizarGraficoCurvaABC, destroyChartCurvaABC } from './graficoCurvaABC.js';
import { initGraficoPizzaCustos, renderizarGraficoPizzaCustos, destroyChartPizzaCustos } from './graficoPizzaCustos.js';
import { initGraficoGantt, renderizarGraficoGantt, destroyChartGantt } from './graficoGantt.js';

export const ui = {
    currentTab: 'configuracoes', 
    calculadora: calc, 
    simulacoesBDI: simBDI, 
    init() { this.setupTabNavigation(); this.populateServicosSelect(); this.setupEventListeners(); configManager.init(); calc.init(); simBDI.init(); initGraficoCurvaABC(); initGraficoPizzaCustos(); initGraficoGantt(); this.changeTab(this.currentTab, true); document.getElementById('currentYear').textContent = new Date().getFullYear(); },
    setupTabNavigation() { const tabLinks = document.querySelectorAll('.tab-link'); tabLinks.forEach(link => { const tabContentId = link.dataset.tab; link.id = `tab-link-${tabContentId}`; link.addEventListener('click', () => this.changeTab(tabContentId)); link.setAttribute('role', 'tab'); link.setAttribute('aria-selected', 'false'); link.setAttribute('tabindex', '-1'); link.setAttribute('aria-controls', tabContentId); const tabContent = document.getElementById(tabContentId); if (tabContent) { tabContent.setAttribute('role', 'tabpanel'); tabContent.setAttribute('aria-labelledby', link.id); } }); const firstTabLink = document.querySelector(`.tab-link[data-tab="${this.currentTab}"]`); if (firstTabLink) { firstTabLink.classList.add('active'); firstTabLink.setAttribute('aria-selected', 'true'); firstTabLink.setAttribute('tabindex', '0'); const firstTabContent = document.getElementById(this.currentTab); if (firstTabContent) firstTabContent.classList.add('active'); } },
    changeTab(tabId, isInitialLoad = false) { if (this.currentTab !== tabId || isInitialLoad) { if (this.currentTab === 'curva-abc' && typeof destroyChartCurvaABC === 'function') destroyChartCurvaABC(); if (this.currentTab === 'resumo' && typeof destroyChartPizzaCustos === 'function') destroyChartPizzaCustos(); if (this.currentTab === 'cronograma' && typeof destroyChartGantt === 'function') destroyChartGantt(); document.querySelectorAll('.tab-content.active').forEach(content => content.classList.remove('active')); document.querySelectorAll('.tab-link.active').forEach(link => { link.classList.remove('active'); link.setAttribute('aria-selected', 'false'); link.setAttribute('tabindex', '-1'); }); const activeTabLink = document.getElementById(`tab-link-${tabId}`); const activeTabContent = document.getElementById(tabId); if(activeTabLink) { activeTabLink.classList.add('active'); activeTabLink.setAttribute('aria-selected', 'true'); activeTabLink.setAttribute('tabindex', '0'); if (!isInitialLoad) activeTabLink.focus(); } if(activeTabContent) activeTabContent.classList.add('active'); this.currentTab = tabId; } if (isInitialLoad) { this.updateAllTabs(); } else { this.updateCurrentTabContent(); } },
    updateCurrentTabContent() { const itensParaRelatorio = calc.getItensComCustosCalculados(); const configParaResumo = { bdiFinal: getBdiFinalAdotado(), areaObra: getAreaObra() }; const totalCustoDireto = calc.getTotalCustoDireto(); const precoVendaTotal = totalCustoDireto * (1 + configParaResumo.bdiFinal / 100); const duracaoInput = document.getElementById('inputDuracaoEstimada'); const duracao = duracaoInput ? (parseInt(duracaoInput.value, 10) || 6) : 6; switch (this.currentTab) { case 'resumo': if (resumoFinanceiro && resumoFinanceiro.updateResumo) resumoFinanceiro.updateResumo(itensParaRelatorio, configParaResumo); if (typeof renderizarGraficoPizzaCustos === 'function') renderizarGraficoPizzaCustos(calc.getTotalCustoMaterial(), calc.getTotalCustoMO()); break; case 'listas': if (moduloListas && moduloListas.updateListaServicos) moduloListas.updateListaServicos(itensParaRelatorio); if (moduloListas && moduloListas.updateListaMateriais) moduloListas.updateListaMateriais(); break; case 'curva-abc': if (curvaABC && curvaABC.updateCurvaABC) { const dadosCurva = curvaABC.updateCurvaABC(itensParaRelatorio); if (typeof renderizarGraficoCurvaABC === 'function') renderizarGraficoCurvaABC(dadosCurva); } break; case 'cronograma': if (cronogramaEstimado && cronogramaEstimado.updateCronograma) cronogramaEstimado.updateCronograma(precoVendaTotal, duracao); if (typeof renderizarGraficoGantt === 'function') renderizarGraficoGantt(itensParaRelatorio, duracao, new Date()); break; case 'simulacoes-bdi': if (simBDI && simBDI.recalculateAllBlocks) simBDI.recalculateAllBlocks(); break; case 'configuracoes': if(configManager && configManager.loadConfigValuesToUI) configManager.loadConfigValuesToUI(); break; case 'calculadora': if(calc && calc.recalcularTodosOsCustos) calc.recalcularTodosOsCustos(); break; } },
    updateAllTabs() { if(calc && calc.recalcularTodosOsCustos) calc.recalcularTodosOsCustos(); const itensParaRelatorio = calc.getItensComCustosCalculados(); const configParaResumo = { bdiFinal: getBdiFinalAdotado(), areaObra: getAreaObra() }; const totalCustoDireto = calc.getTotalCustoDireto(); const precoVendaTotal = totalCustoDireto * (1 + configParaResumo.bdiFinal / 100); const duracaoInput = document.getElementById('inputDuracaoEstimada'); const duracao = duracaoInput ? (parseInt(duracaoInput.value, 10) || 6) : 6; if (resumoFinanceiro && resumoFinanceiro.updateResumo) resumoFinanceiro.updateResumo(itensParaRelatorio, configParaResumo); if (moduloListas && moduloListas.updateListaServicos) moduloListas.updateListaServicos(itensParaRelatorio); if (moduloListas && moduloListas.updateListaMateriais) moduloListas.updateListaMateriais(); if (curvaABC && curvaABC.updateCurvaABC) { const dadosCurva = curvaABC.updateCurvaABC(itensParaRelatorio); if (this.currentTab === 'curva-abc' && typeof renderizarGraficoCurvaABC === 'function') renderizarGraficoCurvaABC(dadosCurva); } if (cronogramaEstimado && cronogramaEstimado.updateCronograma) cronogramaEstimado.updateCronograma(precoVendaTotal, duracao); if (simBDI && simBDI.recalculateAllBlocks) simBDI.recalculateAllBlocks(); if (this.currentTab === 'resumo' && typeof renderizarGraficoPizzaCustos === 'function') renderizarGraficoPizzaCustos(calc.getTotalCustoMaterial(), calc.getTotalCustoMO()); if (this.currentTab === 'cronograma' && typeof renderizarGraficoGantt === 'function') renderizarGraficoGantt(itensParaRelatorio, duracao, new Date()); if (configManager && configManager.loadConfigValuesToUI) configManager.loadConfigValuesToUI(); },
    populateServicosSelect() { const select = document.getElementById('selectServico'); if (!select) return; while (select.options.length > 1) select.remove(1); baseListaServicos.forEach(servico => { const option = document.createElement('option'); option.value = servico.refComposition; option.textContent = servico.description; select.appendChild(option); }); },
    showInputError(inputElement, message) { if (!inputElement) return; const errorElementId = inputElement.id + 'Error'; const errorElement = document.getElementById(errorElementId); inputElement.classList.add('input-error'); if (errorElement) { errorElement.textContent = message; errorElement.style.display = 'block'; } },
    clearInputError(inputElement) { if (!inputElement) return; const errorElementId = inputElement.id + 'Error'; const errorElement = document.getElementById(errorElementId); inputElement.classList.remove('input-error'); if (errorElement) { errorElement.textContent = ''; errorElement.style.display = 'none'; } },
    formatCurrencyInputOnBlur(event) { const input = event.target; this.clearInputError(input); let value = parseCurrency(input.value); let isValid = true; if (isNaN(value)) { this.showInputError(input, 'Valor inválido.'); value = 0; isValid = false; } else if (value < 0) { this.showInputError(input, 'Não pode ser negativo.'); value = 0; isValid = false; } input.value = formatCurrency(value); return { value, isValid }; },
    formatPercentageInputOnBlur(event, min = 0, max = 100) { const input = event.target; this.clearInputError(input); let value = parsePercentage(input.value); let isValid = true; if (isNaN(value)) { this.showInputError(input, 'Valor inválido.'); value = min; isValid = false; } else if (value < min) { this.showInputError(input, `Mínimo ${min}%.`); value = min; isValid = false; } else if (value > max) { this.showInputError(input, `Máximo ${max}%.`); value = max; isValid = false; } input.value = formatPercentage(value); return { value, isValid }; },
    setupEventListeners() { document.getElementById('btnSalvarOrcamento').addEventListener('click', () => persistencia.saveBudget()); document.getElementById('inputCarregarOrcamento').addEventListener('change', (event) => persistencia.loadBudget(event)); document.getElementById('btnResetarAplicacao').addEventListener('click', handlers.handleResetApplication); document.getElementById('btnAdicionarServico').addEventListener('click', handlers.handleAddServico); const inputPesqServ = document.getElementById('inputPesquisaServico'); if (inputPesqServ) inputPesqServ.addEventListener('input', debounce(handlers.handleSearch, 300)); const inputDuracaoEst = document.getElementById('inputDuracaoEstimada'); if (inputDuracaoEst) { inputDuracaoEst.addEventListener('blur', () => { this.clearInputError(inputDuracaoEst); let duracao = parseInt(inputDuracaoEst.value, 10); if (isNaN(duracao) || duracao < 1) { this.showInputError(inputDuracaoEst, "Duração deve ser no mínimo 1 mês."); duracao = parseInt(inputDuracaoEst.min) || 1; } inputDuracaoEst.value = duracao; if (this.currentTab === 'cronograma') this.updateCurrentTabContent(); else this.updateAllTabs(); }); inputDuracaoEst.addEventListener('focus', () => this.clearInputError(inputDuracaoEst)); } const inputArea = document.getElementById('inputAreaObra'); if (inputArea) { inputArea.addEventListener('blur', (event) => { const input = event.target; this.clearInputError(input); let valueStr = input.value.replace(" m²", "").replace(/[^0-9]/g, ''); let value = parseInt(valueStr, 10); if (isNaN(value) || value < 1) { this.showInputError(input, 'Área inválida. Mínimo 1 m² e deve ser inteiro.'); value = getAreaObra(); if (value < 1 || !Number.isInteger(value)) value = 1; } const intValue = value; input.value = `${intValue} m²`; setAreaObra(intValue); this.updateAllTabs(); }); inputArea.addEventListener('focus', () => this.clearInputError(inputArea)); } },
    resetUI() { configManager.resetToDefaults(); calc.resetCalculadora(); if (simBDI.loadValuesFromData) simBDI.loadValuesFromData(); if (simBDI.recalculateAllBlocks) simBDI.recalculateAllBlocks(); const inputPesquisa = document.getElementById('inputPesquisaServico'); if(inputPesquisa) inputPesquisa.value = ''; const selectServ = document.getElementById('selectServico'); if(selectServ) selectServ.value = ''; const inputDuracao = document.getElementById('inputDuracaoEstimada'); if(inputDuracao) { inputDuracao.value = 6; if (this.clearInputError) this.clearInputError(inputDuracao); } this.clearAllErrorMessages(); if (this.currentTab !== 'configuracoes') { this.changeTab('configuracoes', true); } else { this.updateAllTabs(); } },
    clearAllErrorMessages() { document.querySelectorAll('.error-message').forEach(el => { el.textContent = ''; el.style.display = 'none'; }); document.querySelectorAll('.input-error').forEach(el => { el.classList.remove('input-error'); }); }
};